name: Deploy FrostLine

on:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      SSH_HOST: ${{ secrets.SSH_HOST }}
      SSH_USER: ${{ secrets.SSH_USER }}
      SSH_PORT: ${{ secrets.SSH_PORT }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate required secrets
        run: |
          set -euo pipefail
          test -n "${{ secrets.SSH_KEY }}"      || { echo "::error::SSH_KEY is empty"; exit 1; }
          test -n "${SSH_HOST}"                 || { echo "::error::SSH_HOST is empty"; exit 1; }
          test -n "${SSH_USER}"                 || { echo "::error::SSH_USER is empty"; exit 1; }
          test -n "${SSH_PORT}"                 || { echo "::error::SSH_PORT is empty"; exit 1; }
          test -n "${{ secrets.DATABASE_URL }}" || { echo "::error::DATABASE_URL is empty"; exit 1; }
          test -n "${{ secrets.RSR_USERNAME }}" || { echo "::error::RSR_USERNAME is empty"; exit 1; }
          test -n "${{ secrets.RSR_PASSWORD }}" || { echo "::error::RSR_PASSWORD is empty"; exit 1; }

      - name: Start ssh-agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Add host to known_hosts
        run: |
          set -euo pipefail
          mkdir -p ~/.ssh
          ssh-keyscan -p "$SSH_PORT" -H "$SSH_HOST" >> ~/.ssh/known_hosts

      - name: Smoke test SSH
        run: |
          set -euo pipefail
          ssh -o BatchMode=yes -p "$SSH_PORT" "$SSH_USER@$SSH_HOST" "echo ok && whoami && hostname"

      - name: Push env + restart script and run
        env:
          DATABASE_URL:                  ${{ secrets.DATABASE_URL }}
          RSR_USERNAME:                  ${{ secrets.RSR_USERNAME }}
          RSR_PASSWORD:                  ${{ secrets.RSR_PASSWORD }}
          RSR_FTP_HOST:                  ${{ secrets.RSR_FTP_HOST }}
          RSR_FTP_PORT:                  ${{ secrets.RSR_FTP_PORT }}
          RSR_FTPS:                      ${{ secrets.RSR_FTPS }}
          RSR_STANDARD_USERNAME:         ${{ secrets.RSR_STANDARD_USERNAME }}
          RSR_STANDARD_PASSWORD:         ${{ secrets.RSR_STANDARD_PASSWORD }}
          AUTHORIZE_NET_API_LOGIN_ID:    ${{ secrets.AUTHORIZE_NET_API_LOGIN_ID }}
          AUTHORIZE_NET_TRANSACTION_KEY: ${{ secrets.AUTHORIZE_NET_TRANSACTION_KEY }}
          SENDGRID_API_KEY:              ${{ secrets.SENDGRID_API_KEY }}
          ALGOLIA_APP_ID:                ${{ secrets.ALGOLIA_APP_ID }}
          ALGOLIA_ADMIN_API_KEY:         ${{ secrets.ALGOLIA_ADMIN_API_KEY }}
        run: |
          set -euo pipefail

          # Build env file locally
          envfile="$(mktemp)"; umask 077
          {
            echo "PORT=5000"
            echo "NODE_ENV=production"
            echo "DATABASE_URL=${DATABASE_URL}"

            # --- RSR FTPS (explicit TLS on 2222) ---
            echo "RSR_FTP_HOST=${RSR_FTP_HOST:-ftps.rsrgroup.com}"
            echo "RSR_FTP_PORT=${RSR_FTP_PORT:-2222}"
            echo "RSR_PORT=${RSR_FTP_PORT:-2222}"   # <- fix NaN logger
            echo "RSR_FTPS=${RSR_FTPS:-1}"

            # FTP creds ONLY (dealer login)
            echo "RSR_USERNAME=${RSR_USERNAME}"
            echo "RSR_PASSWORD=${RSR_PASSWORD}"

            # RSR “Standard” API creds (separate from FTP)
            if [ -n "${RSR_STANDARD_USERNAME:-}" ]; then echo "RSR_STANDARD_USERNAME=${RSR_STANDARD_USERNAME}"; fi
            if [ -n "${RSR_STANDARD_PASSWORD:-}" ]; then echo "RSR_STANDARD_PASSWORD=${RSR_STANDARD_PASSWORD}"; fi

            # Optional integrations
            if [ -n "${AUTHORIZE_NET_API_LOGIN_ID:-}" ]; then echo "AUTHORIZE_NET_API_LOGIN_ID=${AUTHORIZE_NET_API_LOGIN_ID}"; fi
            if [ -n "${AUTHORIZE_NET_TRANSACTION_KEY:-}" ]; then echo "AUTHORIZE_NET_TRANSACTION_KEY=${AUTHORIZE_NET_TRANSACTION_KEY}"; fi
            if [ -n "${SENDGRID_API_KEY:-}" ]; then echo "SENDGRID_API_KEY=${SENDGRID_API_KEY}"; fi
            if [ -n "${ALGOLIA_APP_ID:-}" ]; then echo "ALGOLIA_APP_ID=${ALGOLIA_APP_ID}"; fi
            if [ -n "${ALGOLIA_ADMIN_API_KEY:-}" ]; then echo "ALGOLIA_ADMIN_API_KEY=${ALGOLIA_ADMIN_API_KEY}"; fi
          } > "$envfile"

          # Push env + restart script
          scp -P "$SSH_PORT" "$envfile" "$SSH_USER@$SSH_HOST:/root/pm2/frostline.env"
          scp -P "$SSH_PORT" .github/scripts/restart.sh "$SSH_USER@$SSH_HOST:/root/pm2/restart.sh"
          rm -f "$envfile"

          # Run restart script on the host
          ssh -p "$SSH_PORT" "$SSH_USER@$SSH_HOST" "chmod 700 /root/pm2/restart.sh && /root/pm2/restart.sh"
