name: Deploy FrostLine (SIMPLE)

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]

permissions:
  contents: read

concurrency:
  group: deploy-frostline-simple-${{ github.ref_name }}
  cancel-in-progress: true

env:
  SSH_USER: ${{ secrets.SSH_USER }}
  SSH_HOST: ${{ secrets.SSH_HOST }}
  SSH_PORT: ${{ secrets.SSH_PORT }}
  APP_PATH: /var/www/frostline
  PM2_APP: ${{ secrets.PM2_APP }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (main)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Load SSH key into agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Trust server host key
        shell: bash
        run: |
          ssh-keyscan -p "$SSH_PORT" "$SSH_HOST" >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: Connectivity test
        shell: bash
        run: |
          ssh -4 -p "$SSH_PORT" -o StrictHostKeyChecking=yes -o PreferredAuthentications=publickey -o BatchMode=yes \
            "$SSH_USER@$SSH_HOST" 'echo OK $(hostname); whoami'

      - name: Bootstrap server (Node 20, PM2, tools) and ensure path
        shell: bash
        run: |
          ssh -4 -p "$SSH_PORT" -o StrictHostKeyChecking=yes "$SSH_USER@$SSH_HOST" /bin/bash -lc '
            set -e
            export DEBIAN_FRONTEND=noninteractive
            apt-get update -y
            apt-get install -y ca-certificates curl gnupg rsync git build-essential python3 pkg-config jq
            if ! command -v node >/dev/null 2>&1; then
              curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
              apt-get install -y nodejs
            fi
            if ! command -v pm2 >/dev/null 2>&1; then
              npm i -g pm2
            fi
            mkdir -p "'"$APP_PATH"'"
            node -v; npm -v; pm2 -v
          '

      - name: Sync files to server
        shell: bash
        run: |
          rsync -az --delete \
            --rsh="ssh -4 -p $SSH_PORT -o StrictHostKeyChecking=yes -o PreferredAuthentications=publickey -o BatchMode=yes" \
            --exclude ".git/" --exclude ".github/" --exclude "node_modules/" --exclude "*.log" \
            ./ "$SSH_USER@$SSH_HOST:$APP_PATH/"

      - name: Ensure PM2 wrapper exists (sources /etc/frostline/env)
        shell: bash
        run: |
          ssh -4 -p "$SSH_PORT" -o StrictHostKeyChecking=yes "$SSH_USER@$SSH_HOST" /bin/bash -lc '
            set -e
            sudo mkdir -p /root/pm2
            sudo tee /root/pm2/start-frostline.sh >/dev/null <<'"'"'SH'"'"'
#!/usr/bin/env bash
set -euo pipefail
cd /var/www/frostline
set -a
[ -f /etc/frostline/env ] && . /etc/frostline/env
[ -f ./.env.update ] && . ./.env.update
set +a
export PORT="${PORT:-5001}"
export NODE_ENV="${NODE_ENV:-production}"
exec node dist/index.js
SH
            sudo chmod +x /root/pm2/start-frostline.sh
          '

      - name: Build & restart with PM2 (use wrapper)
        shell: bash
        run: |
          ssh -4 -p "$SSH_PORT" -o StrictHostKeyChecking=yes "$SSH_USER@$SSH_HOST" /bin/bash -lc '
            set -e
            cd "'"$APP_PATH"'"
            export NPM_CONFIG_FUND=false NPM_CONFIG_AUDIT=false
            npm ci
            npm run build

            APP_NAME="'"${PM2_APP:-frostline}"'"
            if pm2 describe "$APP_NAME" >/dev/null 2>&1; then
              pm2 delete "$APP_NAME"
            fi
            pm2 start /root/pm2/start-frostline.sh --name "$APP_NAME" --cwd "'"$APP_PATH"'"
            pm2 save
          '
