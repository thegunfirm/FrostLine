name: Deploy FrostLine

on:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      SSH_HOST: ${{ secrets.SSH_HOST }}
      SSH_USER: ${{ secrets.SSH_USER }}
      SSH_PORT: ${{ secrets.SSH_PORT }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate required secrets
        run: |
          set -euo pipefail
          test -n "${{ secrets.SSH_KEY }}"       || { echo "::error::SSH_KEY is empty"; exit 1; }
          test -n "${SSH_HOST}"                  || { echo "::error::SSH_HOST is empty"; exit 1; }
          test -n "${SSH_USER}"                  || { echo "::error::SSH_USER is empty"; exit 1; }
          test -n "${SSH_PORT}"                  || { echo "::error::SSH_PORT is empty"; exit 1; }
          test -n "${{ secrets.DATABASE_URL }}"  || { echo "::error::DATABASE_URL is empty"; exit 1; }
          test -n "${{ secrets.RSR_USERNAME }}"  || { echo "::error::RSR_USERNAME (FTP) is empty"; exit 1; }
          test -n "${{ secrets.RSR_PASSWORD }}"  || { echo "::error::RSR_PASSWORD (FTP) is empty"; exit 1; }

      - name: Start ssh-agent (load private key)
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Add host to known_hosts
        run: |
          set -euo pipefail
          mkdir -p ~/.ssh
          ssh-keyscan -p "$SSH_PORT" "$SSH_HOST" >> ~/.ssh/known_hosts

      - name: Smoke test SSH
        run: |
          set -euo pipefail
          ssh -p "$SSH_PORT" "$SSH_USER@$SSH_HOST" 'echo ok; whoami; hostname'

      - name: Write env and restart PM2
        env:
          # Required
          DATABASE_URL:                  ${{ secrets.DATABASE_URL }}
          RSR_USERNAME:                  ${{ secrets.RSR_USERNAME }}
          RSR_PASSWORD:                  ${{ secrets.RSR_PASSWORD }}

          # Recommended defaults (overridable)
          RSR_FTP_HOST:                  ${{ secrets.RSR_FTP_HOST }}
          RSR_FTP_PORT:                  ${{ secrets.RSR_FTP_PORT }}
          RSR_FTPS:                      ${{ secrets.RSR_FTPS }}

          # RSR “Standard” (API/feed) – distinct from FTP (optional)
          RSR_STANDARD_USERNAME:         ${{ secrets.RSR_STANDARD_USERNAME }}
          RSR_STANDARD_PASSWORD:         ${{ secrets.RSR_STANDARD_PASSWORD }}

          # Optional integrations (we’ll default them to "disabled" if empty)
          AUTHORIZE_NET_API_LOGIN_ID:    ${{ secrets.AUTHORIZE_NET_API_LOGIN_ID }}
          AUTHORIZE_NET_TRANSACTION_KEY: ${{ secrets.AUTHORIZE_NET_TRANSACTION_KEY }}
          SENDGRID_API_KEY:              ${{ secrets.SENDGRID_API_KEY }}
          ALGOLIA_APP_ID:                ${{ secrets.ALGOLIA_APP_ID }}
          ALGOLIA_ADMIN_API_KEY:         ${{ secrets.ALGOLIA_ADMIN_API_KEY }}
        run: |
          set -euo pipefail

          # Ensure remote folder exists (private perms)
          ssh -p "$SSH_PORT" "$SSH_USER@$SSH_HOST" 'install -d -m 700 /root/pm2'

          # --- Build a temp .env locally (masked in logs) ---
          envfile="$(mktemp)"; umask 077
          {
            printf 'PORT=5000\n'
            printf 'NODE_ENV=production\n'
            printf 'DATABASE_URL=%s\n' "$DATABASE_URL"

            # --- RSR FTPS (explicit TLS on 2222) ---
            printf 'RSR_FTP_HOST=%s\n' "${RSR_FTP_HOST:-ftps.rsrgroup.com}"
            printf 'RSR_FTP_PORT=%s\n' "${RSR_FTP_PORT:-2222}"
            printf 'RSR_FTPS=%s\n'     "${RSR_FTPS:-1}"

            # FTP creds ONLY (dealer login)
            printf 'RSR_USERNAME=%s\n' "$RSR_USERNAME"
            printf 'RSR_PASSWORD=%s\n' "$RSR_PASSWORD"

            # --- RSR "Standard" feed/API creds (separate from FTP) ---
            if [ -n "${RSR_STANDARD_USERNAME:-}" ]; then printf 'RSR_STANDARD_USERNAME=%s\n' "$RSR_STANDARD_USERNAME"; fi
            if [ -n "${RSR_STANDARD_PASSWORD:-}" ]; then printf 'RSR_STANDARD_PASSWORD=%s\n' "$RSR_STANDARD_PASSWORD"; fi

            # Optional integrations – give safe defaults to avoid import-time crashes
            printf 'AUTHORIZE_NET_API_LOGIN_ID=%s\n'    "${AUTHORIZE_NET_API_LOGIN_ID:-disabled}"
            printf 'AUTHORIZE_NET_TRANSACTION_KEY=%s\n' "${AUTHORIZE_NET_TRANSACTION_KEY:-disabled}"
            printf 'SENDGRID_API_KEY=%s\n'              "${SENDGRID_API_KEY:-disabled}"
            printf 'ALGOLIA_APP_ID=%s\n'                "${ALGOLIA_APP_ID:-disabled}"
            printf 'ALGOLIA_ADMIN_API_KEY=%s\n'         "${ALGOLIA_ADMIN_API_KEY:-disabled}"
          } >"$envfile"

          # --- Create the remote restart script locally (no heredocs) ---
          restart="$(mktemp)"; umask 077
          {
            printf '%s\n' '#!/usr/bin/env bash'
            printf '%s\n' 'set -euo pipefail'
            printf '%s\n' 'set +H'  # disable history expansion in case any value contains "!"
            printf '%s\n' 'chmod 600 /root/pm2/frostline.env'
            printf '%s\n' 'set -a; . /root/pm2/frostline.env; set +a'
            printf '%s\n' 'cd /var/www/frostline'
            # start if missing, otherwise restart with env
            printf '%s\n' 'if ! pm2 describe frostline >/dev/null 2>&1; then'
            printf '%s\n' '  pm2 start dist/index.js --name frostline --cwd /var/www/frostline'
            printf '%s\n' 'else'
            printf '%s\n' '  pm2 restart frostline --update-env --cwd /var/www/frostline'
            printf '%s\n' 'fi'
            printf '%s\n' 'pm2 save'

            # --- Wait for the app to actually bind to PORT (retry up to 30s) ---
            printf '%s\n' 'PORT="${PORT:-5000}"'
            printf '%s\n' 'ok=0'
            printf '%s\n' 'for i in $(seq 1 30); do'
            printf '%s\n' '  if ss -ltnp | grep -qE ":(${PORT})\\b"; then ok=1; break; fi'
            printf '%s\n' '  sleep 1'
            printf '%s\n' 'done'
            printf '%s\n' 'if [ "$ok" -ne 1 ]; then'
            printf '%s\n' '  echo "::error::app is not listening on :$PORT after 30s"'
            printf '%s\n' '  ss -ltnp || true'
            printf '%s\n' '  pm2 logs frostline --lines 200 --nostream || true'
            printf '%s\n' '  exit 1'
            printf '%s\n' 'fi'

            # quick HTTP probe + show FTPS handshake lines
            printf '%s\n' 'curl -sI "http://127.0.0.1:$PORT/" | head -1 || true'
            printf '%s\n' 'pm2 logs frostline --lines 120 --nostream | egrep -i "Connecting FTPS|> USER|< 331|< 230|< 530" || true'
          } >"$restart"
          chmod 700 "$restart"

          # --- Ship files and run ---
          scp -P "$SSH_PORT" "$envfile" "$SSH_USER@$SSH_HOST:/root/pm2/frostline.env"
          scp -P "$SSH_PORT" "$restart" "$SSH_USER@$SSH_HOST:/root/pm2/restart-frostline.sh"
          rm -f "$envfile" "$restart"

          ssh -p "$SSH_PORT" "$SSH_USER@$SSH_HOST" "bash /root/pm2/restart-frostline.sh"
